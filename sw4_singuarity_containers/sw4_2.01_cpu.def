Bootstrap: library
From: ubuntu:latest

%post
    # Install dependencies
    apt update && \
       DEBIAN_FRONTEND='noninteractive' \
       DEBCONF_NONINTERACTIVE_SEEN='true' \
       apt install --yes \
          build-essential \
          cmake \
          gfortran \
          libblas-dev \
          liblapack-dev \
          libmpich-dev \
          python3 \
          git \
          wget \
          pkg-config \
          python3-numpy \
          libsqlite3-dev \
          sqlite3 \
          libproj-dev \
          libhdf5-dev \
          python3-h5py

    SW4ROOT=/sw4_library
    mkdir ${SW4ROOT}

    # Build MPICH
    MPI_VERSION="3.1.4" #"3.4.3"
    MPI_CONFIGURE_OPTIONS="--enable-fast=all,O3 --prefix=/usr/lib64 FFLAGS=-fallow-argument-mismatch FCFLAGS=-fallow-argument-mismatch" #works with 3.1.4, and 4.0.x
    #MPI_CONFIGURE_OPTIONS="--enable-fast=all,O3 --prefix=/usr/lib64 --with-device=ch4:ofi"
    MPI_MAKE_OPTIONS="-j4"

    mkdir -p /tmp/mpich-build \
      && cd /tmp/mpich-build \
      && wget http://www.mpich.org/static/downloads/${MPI_VERSION}/mpich-${MPI_VERSION}.tar.gz \
      && tar xvzf mpich-${MPI_VERSION}.tar.gz \
      && cd mpich-${MPI_VERSION}  \
      && ./configure ${MPI_CONFIGURE_OPTIONS} \
      && make ${MPI_MAKE_OPTIONS} \
      && make install \
      && ldconfig \
      && cp -p /tmp/mpich-build/mpich-${MPI_VERSION}/examples/cpi /usr/bin/ \
      && cd / \
      && rm -rf /tmp/mpich-build

    export PATH=/usr/lib64/bin:$PATH
    export OMP_NUM_THREADS=1

   
    # Some uesful Linux utilities
    apt-get update -qq \
      && apt-get -y --no-install-recommends install patchelf strace ltrace \
      && apt-get clean all \
      && rm -r /var/lib/apt/lists/*

    # Download and build proj
    wget "https://download.osgeo.org/proj/proj-7.2.0.tar.gz"
    tar xvf proj-7.2.0.tar.gz
    cd proj-7.2.0
    mkdir build
    cd build
    cmake -DBUILD_APPS=OFF -DCMAKE_INSTALL_PREFIX=${SW4ROOT} ..
    make
    make install
    cd ../..

    # Download and build SW4    
    #wget "https://github.com/geodynamics/sw4/archive/refs/tags/v2.01.tar.gz"
    wget "https://github.com/geodynamics/sw4/releases/download/v2.01/sw4-v2.01.tgz"
    tar xzf sw4-v2.01.tgz
    mv sw4-v2.01 sw4
    cd sw4

    # generate make.inc file
    echo "proj = yes" >> configs/make.inc
    echo "etree = no" >> configs/make.inc
    echo "FC = mpif77" >> configs/make.inc
    echo "CXX = mpicxx" >> configs/make.inc
    echo "SW4ROOT = ${SW4ROOT}" >> configs/make.inc
    echo "EXTRA_LINK_FLAGS = -L/usr/lib64 -llapack -lblas -lgfortran -Wl,-rpath=${SW4ROOT}/lib" >> configs/make.inc

    awk 'NR==34{print "#define ACCEPT_USE_OF_DEPRECATED_PROJ_API_H"}1' src/GeographicProjection.h > src/GeographicProjection.h_new
    rm -r src/GeographicProjection.h
    mv src/GeographicProjection.h_new src/GeographicProjection.h
    
    make
    cd ..

%environment
    export PATH=$PATH:/sw4/optimize/sw4
    echo 'export PATH=/sw4/optimize/sw4:$PATH' >> $SINGULARITY_ENVIRONMENT
    export PATH=$PATH:/usr/local/bin

    export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/lib64/lib:$LD_LIBRARY_PATH
    export PATH=/usr/lib64/bin:$PATH

    export SINGULARITYENV_LD_LIBRARY_PATH="/usr/lib64:\$LD_LIBRARY_PATH"

    export OMP_NUM_THREADS=1

%post
    # Install sw4 executable
    scp -r /sw4/optimize/sw4 /usr/local/bin
    chmod +x /usr/local/bin/sw4
    chmod +x /sw4/optimize/sw4

    # Run SW4 test_sw4.py file
    cd /sw4/pytest
    #ls
    #ls /sw4/optimize
    python3 test_sw4.py

    sw4 -v

%runscript
    # Run the command specified on the command line, or sw4 if no command is specified
    if [ -z "$1" ]; then
        sw4
    else
        exec "$@"
    fi
